make leapsec fixed/variable test
support dst shifts that go across a year boundary

timeinstant from datetime func
datebase/datedelta from/to datetime.date
timeinstant from/to time lib time tuple
finish strftime utc and tz

timeinstant: pull timezone info from tzdb

add leap smear support
strptime support
add a bunch of funcs like setdate get/set/increment taiyear/utchour, etc. for timeinstant and date classes as well (all return a new instance since immutable)
use namedtuples for tuple output
complete all ... and notimplementederrors

low prio:
add leap second support to now
strftime & strptime add param for enabling custom flags like %f.6
add aliases from datetime library, maybe full compatibility class
simpledatetime/simpletimedelta wrapper around the date classes
  maybe holds a timezone value to use for setyear and stuff
support other timescales and julian dates in other timescales
  add microsoft epoch ticks, .net ticks
  add gps timescale to timescales list?
  ntp timestamps
    remove temp ntp timestamp code in auto leap seconds
  make all timescales except utc be derived from a list of offset, rate tuples; enables adding tcg, tcb, maybe time center galaxy and time comoving frame as well
  bonus is add ut1 timestamp funcs
fixedprec constructor handle real, integral
continue splitting timeinstant into many classes
split fixedprec into many classes
tests:
  timeinstant: tests for leap seconds during day
  timeinstant: test for passing in non-gregoriandate into to/from date tuple
  timeinstant: proper tests for timezone leapsecond, dst support

prob not doing:
add calendar functionality for isoweekdate
bump up max precision on the fixedprec on julian date calculations during calculation and reduce max prec to normal after
  default false option to do this
add default high detail tostring for tai and utc
timedelta/timeinstant from datetime/timedelta when doing math operations
datebase/datedelta from/to datetime.date when doing math operations
tests:
  date: monthly/yearly calendar generation funcs
